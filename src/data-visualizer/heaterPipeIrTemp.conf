# Filtering configuration for ir temperature from heater pipe

# measures origin
fileName = "../../measures/tempTuyau.dat"; 

# file containing the "real" moments where the heater was started/stopped
# (optionnal)
factualStateChangeFileName = "../../measures/tempTFactual.dat";

# the algorithm to apply for data filtering
# choose from:
# "NONE" (no filtering),
# "ON_OFF_HEAT" (basic heat-based filtering for heater start detection),
# "ON_OFF_HEAT_ADVANCED" (advanced heat-based filtering for heater start
# detection),
# "ON_OFF_ACCELERATION" (acceleration-based filtering for heater start detection),
# "WATER_FLOW_ACCELERATION" (acceleration-based filtering for water flow
# calculation)
filterType = "ON_OFF_HEAT_ADVANCED";

# the filtering algorithm's parameters
filterConfiguration = {
    thresholdHActive = 26.0; # temperature threshold for heater start:
                             # value over -> heater on (ON_OFF_HEAT_ADVANCED)
    thresholdHInactive = 28.4; # temperature threshold for heater stop:
                               # value under -> heater off (ON_OFF_HEAT_ADVANCED)
    inertiaHActive = 3;
    inertiaHInactive = 7; # amount of seconds to shift on to compensate thermal
                        # inertia when the heater stops (ON_OFF_HEAT[_ADVANCED])
    heatMeasureIdx = 0; # heat value row index in the measure file
                        # (ON_OFF_HEAT[_ADVANCED])
    minCountActive = 2; # minimal successive "on" values to consider
                        # the heater on (all the ON_OFF_)
    minCountInactive = 4; # minimal successive "off" values to consider
                          # the heater off
};

# used for chart drawing
outputConfiguration = {
    isBoolResult = true;
    # do not put a field, if you do not want to see it on the chart
    irTempIdx = 0;
};

